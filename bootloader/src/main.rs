#![no_std]
#![no_main]
#![feature(allocator_api)]
#![feature(format_args_nl)]
// TODO: think about if this is necessary
#![deny(unsafe_op_in_unsafe_fn)]

mod acpi;
mod allocator;
mod elf;
mod print;

use acpi::DefinitionHeader;
use alloc::vec::{PushError, Vec};
use bootloader_api::BootInfo;
use core::{
    alloc::{Allocator, Layout},
    fmt::{Arguments, Write},
};
use elf::{get_elf_entry_point_offset, KernelExecutable};
use serial::{SerialPort, COM1_BASE};
use uefi::{
    allocator::UefiAllocator,
    services::{
        boot::{BootServices, Guid, MemoryDescriptor, MemoryMap, MemoryType},
        filesystem::FileSystem,
        graphics::{BltPixel, Graphics},
    },
    string::String16,
};
use x86_64::{
    control::{Cr0, Cr2, Cr3, Cr4},
    flags::RFlags,
    idt::read_cs,
    paging::{FrameAllocator, PageTable, PhysAddr, VirtAddr},
};

#[macro_export]
macro_rules! sprintln {
    ($($arg:tt)*) => {{
        $crate::serial_print(format_args_nl!($($arg)*));
    }};
}

fn serial_print(args: Arguments) {
    let mut serial = SerialPort::new(COM1_BASE);
    serial.write_fmt(args).unwrap();
}

use crate::{
    acpi::{Fadt, Rsdp},
    allocator::BumpAllocator,
};

#[no_mangle]
pub extern "efiapi" fn efi_main(
    image_handle: uefi::Handle,
    system_table: uefi::SystemTable<uefi::Uninit>,
) -> uefi::Status {
    let system_table = system_table.init();
    let uefi_allocator = UefiAllocator::new(system_table.boot_services());
    system_table.con_out().reset(false).unwrap();
    SerialPort::new(COM1_BASE).configure(1);

    // This is what the bootloader needs to do:
    // 1. Read the kernel file
    let kernel_executable =
        read_kernel_executable(system_table.boot_services(), &uefi_allocator).unwrap();
    sprintln!("{:#x?}", kernel_executable);

    // 2. Retrieve kernel args from UEFI boot services before it goes out of scope
    let framebuffer = get_framebuffer(system_table.boot_services());

    // Calculate the total size of the boot info struct, including regions which are pointed to
    let boot_info_layout = Layout::new::<BootInfo>();
    let memory_regions_layout = Layout::array::<bootloader_api::MemoryRegion>(0).unwrap();
    let reserved_memory_regions_layout =
        Layout::array::<bootloader_api::ReservedMemoryRegion>(0).unwrap();
    let (boot_info_layout, memory_regions_offset) =
        boot_info_layout.extend(memory_regions_layout).unwrap();
    let (_boot_info_layout, reserved_memory_regions_offset) = boot_info_layout
        .extend(reserved_memory_regions_layout)
        .unwrap();

    const EFI_ACPI_TABLE_GUID: Guid = Guid(
        0x8868e871,
        0xe4f1,
        0x11d3,
        [0xbc, 0x22, 0x00, 0x80, 0xc7, 0x3c, 0x88, 0x81],
    );

    let acpi_entry = system_table
        .configuration_table()
        .iter()
        .find(|entry| entry.vendor_guid == EFI_ACPI_TABLE_GUID)
        .unwrap();
    sprintln!("{:x?}", acpi_entry);

    let rsdp = unsafe { Rsdp::from_addr(acpi_entry.vendor_table as _) };

    // Allocate frames for the boot info
    let boot_info_addr = 0;

    let memory_map = system_table
        .boot_services()
        .get_memory_map(&uefi_allocator)
        .unwrap();

    let bump_allocator = BumpAllocator::new(memory_map.iter());
    let memory_map_key = memory_map.key;
    let _kernel_mem_regions = get_kernel_mem_regions(&memory_map, &bump_allocator).unwrap();
    // sprintln!( "{:#x?}", _kernel_mem_regions);
    core::mem::forget(memory_map);

    // Exit UEFI boot services
    let system_table = system_table
        .exit_boot_services(image_handle, memory_map_key)
        .unwrap();
    let idt = bump_allocator.allocate_pages(1).unwrap();
    let gdt = bump_allocator.allocate_pages(1).unwrap();

    let pml4_frame = bump_allocator.allocate_frame().unwrap();
    let pml4 = PageTable::new(pml4_frame as _);

    // Identity map all boot service regions so that bootloader continues working
    for desc in _kernel_mem_regions.iter() {
        if desc.ty == MemoryType::EfiBootServicesCode
            || desc.ty == MemoryType::EfiBootServicesData
            || desc.ty == MemoryType::EfiACPIReclaimMemory
        {
            for frame_index in 0..desc.number_of_pages {
                pml4.map_ident(
                    VirtAddr::new(desc.physical_start + frame_index * 4096),
                    &bump_allocator,
                );
            }
        }
    }

    // Map kernel to virtual addresses
    for page in 0..kernel_executable.frames {
        pml4.map(
            VirtAddr::new(kernel_executable.image_start + page * 4096),
            PhysAddr::new(kernel_executable.frame_addr + page * 4096),
            &bump_allocator,
        );
    }

    // Identity map framebuffer
    let framebuffer_frames =
        framebuffer.height * framebuffer.width * core::mem::size_of::<BltPixel>() / 4096;
    for page in 0..framebuffer_frames {
        pml4.map_ident(
            VirtAddr::new((framebuffer.base + page * 4096) as u64),
            &bump_allocator,
        );
    }

    // Allocate stack for the kernel and map it to virtual addresses
    let stack_pages = 8;
    let stack_end: u64 = 0xffff_ffff_ffff_fff8;
    let stack_start = (stack_end & !0xfff) - (stack_pages - 1) * 4096;
    for page in 0..stack_pages {
        let frame = bump_allocator.allocate_frame().unwrap();
        pml4.map(
            VirtAddr::new(stack_start + page * 4096),
            PhysAddr::new(frame),
            &bump_allocator,
        );
    }

    // print_page_table(&mut serial, &pml4);

    Cr3::write(pml4_frame);

    for hdr_ptr in rsdp.table_ptrs() {
        let hdr = unsafe { hdr_ptr.read() };
        if &hdr.signature == b"FACP" {
            let ptr = *hdr_ptr as *const Fadt;
            let fadt = unsafe { ptr.read() };
            sprintln!(
                "{} {:#x?}",
                core::str::from_utf8(&hdr.signature).unwrap(),
                fadt
            );
            let dsdt_addr = fadt.dsdt;
            print_dsdt(dsdt_addr as _);
        } else if &hdr.signature == b"APIC" {
            // TODO: print the entries
            print_apic(*hdr_ptr);
        } else {
            sprintln!(
                "{} {:?}",
                core::str::from_utf8(&hdr.signature).unwrap(),
                hdr
            );
        }
    }

    // Populate memory regions
    let memory_regions_addr = boot_info_addr + memory_regions_offset;
    let memory_regions_len = 0;

    // Populate reserved memory regions
    // Kernel
    // Page table
    let reserved_memory_regions_addr = boot_info_addr + reserved_memory_regions_offset;
    let reserved_memory_regions_len = 0;

    let info = BootInfo {
        uefi_system_table: system_table,
        framebuffer,
        kernel: bootloader_api::Kernel {
            base: kernel_executable.image_start,
            frames: kernel_executable.frames as _,
            stack_base: stack_end as _,
        },
        memory_regions: bootloader_api::MemoryRegions {
            ptr: memory_regions_addr as _,
            len: memory_regions_len,
        },
        reserved_memory_regions: bootloader_api::ReservedMemoryRegions {
            ptr: reserved_memory_regions_addr as _,
            len: reserved_memory_regions_len,
        },
        idt,
        gdt,
    };
    let info_ptr = &info as *const BootInfo;

    sprintln!("launching kernel!!");
    sprintln!(
        "jumping to {:#x}, new stack {:#x}",
        kernel_executable.entry_point,
        stack_end
    );

    // 4. Call the kernel
    unsafe {
        core::arch::asm!("mov rsp, {}; jmp {}",
          in(reg) stack_end,
          in(reg) kernel_executable.entry_point,
          in("rdi") info_ptr,
        );
    }

    unreachable!("should have jumped to kernel at this point")
}

#[panic_handler]
fn panic(info: &core::panic::PanicInfo) -> ! {
    sprintln!("{:?}", info);
    loop {}
}

fn read_kernel_executable(
    uefi_boot_services: &BootServices,
    uefi_allocator: &UefiAllocator,
) -> Result<KernelExecutable, usize> {
    let fs = uefi_boot_services.locate_protocol::<FileSystem>()?;
    let root_fs = fs.open_volume()?;
    let file_name = String16::from_str("ros", &uefi_allocator).map_err(|_| 99usize)?;
    let file = root_fs.open(file_name.as_raw(), 0x3, 0x0)?;
    let info = file.get_info(&uefi_allocator)?;
    let mut buffer = Vec::with_elem(0u8, info.file_size as usize, &uefi_allocator).unwrap();
    let _read_bytes = file.read(&mut buffer).unwrap();
    // TODO: impl truncate
    // buffer.truncate(read_bytes);
    get_elf_entry_point_offset(uefi_boot_services, &buffer, &uefi_allocator).map_err(|_| 100usize)
}

fn get_kernel_mem_regions<'alloc, A: Allocator>(
    memory_map: &MemoryMap<UefiAllocator>,
    alloc: &'alloc A,
) -> Result<Vec<'alloc, MemoryDescriptor, A>, PushError> {
    let mut kernel_mem_regions: Vec<MemoryDescriptor, _> = Vec::new(alloc);
    for desc in memory_map.iter() {
        if let Some(last) = kernel_mem_regions.last_mut() {
            let overlap = last.physical_start + last.number_of_pages * 4096 == desc.physical_start;
            if last.ty.usable_by_kernel() && desc.ty.usable_by_kernel() && overlap {
                last.number_of_pages += desc.number_of_pages;
            } else {
                kernel_mem_regions.push(*desc)?;
            }
        } else {
            kernel_mem_regions.push(*desc)?;
        }
    }

    Ok(kernel_mem_regions)
}

fn get_framebuffer(uefi_boot_services: &BootServices) -> bootloader_api::Framebuffer {
    let graphics = uefi_boot_services.locate_protocol::<Graphics>().unwrap();
    bootloader_api::Framebuffer {
        base: graphics.mode.frame_buffer_base as _,
        width: graphics.mode.info.horizontal_resolution as _,
        height: graphics.mode.info.vertical_resolution as _,
    }
}

#[allow(dead_code)]
fn dump_registers() {
    sprintln!("{:x?}", RFlags::read());
    sprintln!("{:x?}", Cr0::read());
    sprintln!("{:x?}", Cr2::read());
    sprintln!("{:x?}", Cr3::read());
    sprintln!("{:x?}", Cr4::read());
    sprintln!("CS: {:x?}", read_cs());
}

fn print_apic(hdr_ptr: *const DefinitionHeader) {
    let hdr = unsafe { hdr_ptr.read() };
    let byte_ptr = unsafe { hdr_ptr.add(1) }.cast::<u8>();
    let local_interrupts_controller_address = unsafe { byte_ptr.cast::<u32>().read() };
    let flags = unsafe { byte_ptr.add(1).cast::<u32>().read() };
    sprintln!(
        "{:#x?}, local interrupts controller addr: {:x}, flags: {:x}",
        hdr,
        local_interrupts_controller_address,
        flags
    );

    let mut entry_start = unsafe { byte_ptr.add(8) };
    loop {
        let ty = unsafe { entry_start.read() };
        let len = unsafe { entry_start.add(1).read() };
        match ty {
            0 => {
                #[derive(Debug)]
                #[repr(C, packed)]
                struct LocalApic {
                    processor_uid: u8,
                    apic_id: u8,
                    flags: u32,
                }
                sprintln!("{:x?}", unsafe {
                    entry_start.add(2).cast::<LocalApic>().read()
                });
            }
            1 => {
                #[derive(Debug)]
                #[repr(C, packed)]
                struct IoApic {
                    apic_id: u8,
                    _reserved: u8,
                    apic_addr: u32,
                    global_system_interrupt_base: u32,
                }
                sprintln!("{:x?}", unsafe {
                    entry_start.add(2).cast::<IoApic>().read()
                });
            }
            2 => {
                #[derive(Debug)]
                #[repr(C, packed)]
                struct InterruptSourceOverride {
                    bus: u8,
                    source: u8,
                    global_system_interrupts: u32,
                    flags: u16,
                }
                sprintln!("{:x?}", unsafe {
                    entry_start.add(2).cast::<InterruptSourceOverride>().read()
                });
            }
            4 => {
                #[derive(Debug)]
                #[repr(C, packed)]
                struct LocalApicNmi {
                    processor_uid: u8,
                    flags: u16,
                    local_apic_lint: u8,
                }
                sprintln!("{:x?}", unsafe {
                    entry_start.add(2).cast::<LocalApicNmi>().read()
                });
            }
            _ => {
                sprintln!("{:x?} {:x} {:x}", entry_start, ty, len);
            }
        }

        entry_start = unsafe { entry_start.add(len as _) };
        if entry_start as usize >= hdr_ptr as usize + hdr.length as usize {
            break;
        }
    }
}

fn print_dsdt(dsdt_addr: u64) {
    let ptr = dsdt_addr as *const DefinitionHeader;
    let hdr = unsafe { ptr.read() };
    let aml_ptr = unsafe { ptr.add(1) }.cast::<u8>();
    let aml_len = hdr.length - 36;
    // let aml_slice = unsafe { core::slice::from_raw_parts(ptr as *const u8, hdr.length as _) };
    let aml_slice = unsafe { core::slice::from_raw_parts(aml_ptr, aml_len as _) };
    let aml_slice = [
        16u8, 73, 4, 92, 0, 91, 128, 68, 66, 71, 95, 1, 11, 2, 4, 1, 91, 129, 11, 68, 66, 71, 95,
        1, 68, 66, 71, 66, 8, 20, 44, 68, 66, 85, 71, 1, 152, 104, 96, 150, 96, 96, 116, 135, 96,
        1, 97, 112, 0, 98, 162, 16, 149, 98, 97, 112, 131, 136, 96, 98, 0, 68, 66, 71, 66, 117, 98,
        112, 10, 10, 68, 66, 71, 66, 16, 74, 7, 95, 83, 66, 95, 91, 130, 66, 7, 80, 67, 73, 48, 8,
        95, 72, 73, 68, 12, 65, 208, 10, 3, 8, 95, 85, 73, 68, 0, 20, 75, 5, 69, 68, 83, 77, 13,
        160, 54, 147, 106, 0, 112, 17, 3, 1, 0, 96, 160, 26, 146, 147, 104, 17, 19, 10, 16, 208,
        55, 201, 229, 83, 53, 122, 77, 145, 23, 234, 77, 25, 195, 67, 77, 164, 96, 160, 7, 149,
        105, 10, 2, 164, 96, 112, 10, 129, 136, 96, 0, 0, 164, 96, 160, 28, 147, 106, 10, 7, 112,
        18, 5, 2, 0, 13, 0, 96, 112, 131, 136, 108, 0, 0, 97, 112, 97, 136, 96, 0, 0, 164, 96, 16,
        76, 20, 46, 95, 83, 66, 95, 80, 67, 73, 48, 91, 128, 80, 67, 83, 84, 1, 11, 0, 174, 10, 8,
        91, 129, 16, 80, 67, 83, 84, 67, 80, 67, 73, 85, 32, 80, 67, 73, 68, 32, 91, 128, 83, 69,
        74, 95, 1, 11, 8, 174, 10, 4, 91, 129, 11, 83, 69, 74, 95, 67, 66, 48, 69, 74, 32, 91, 128,
        66, 78, 77, 82, 1, 11, 16, 174, 10, 8, 91, 129, 16, 66, 78, 77, 82, 67, 66, 78, 85, 77, 32,
        80, 73, 68, 88, 32, 91, 1, 66, 76, 67, 75, 0, 20, 37, 80, 67, 69, 74, 2, 91, 35, 66, 76,
        67, 75, 255, 255, 112, 104, 66, 78, 85, 77, 112, 121, 1, 105, 0, 66, 48, 69, 74, 91, 39,
        66, 76, 67, 75, 164, 0, 20, 43, 65, 73, 68, 88, 2, 91, 35, 66, 76, 67, 75, 255, 255, 112,
        104, 66, 78, 85, 77, 112, 121, 1, 105, 0, 80, 73, 68, 88, 112, 80, 73, 68, 88, 96, 91, 39,
        66, 76, 67, 75, 164, 96, 20, 66, 9, 80, 68, 83, 77, 13, 160, 68, 6, 147, 106, 0, 112, 17,
        3, 1, 0, 96, 160, 26, 146, 147, 104, 17, 19, 10, 16, 208, 55, 201, 229, 83, 53, 122, 77,
        145, 23, 234, 77, 25, 195, 67, 77, 164, 96, 160, 7, 149, 105, 10, 2, 164, 96, 112, 0, 97,
        112, 65, 73, 68, 88, 131, 136, 108, 0, 0, 131, 136, 108, 1, 0, 98, 160, 26, 146, 125, 147,
        98, 0, 147, 98, 12, 255, 255, 255, 255, 0, 125, 97, 1, 97, 125, 97, 121, 1, 10, 7, 0, 97,
        112, 97, 136, 96, 0, 0, 164, 96, 160, 37, 147, 106, 10, 7, 112, 18, 5, 2, 0, 13, 0, 96,
        112, 65, 73, 68, 88, 131, 136, 108, 0, 0, 131, 136, 108, 1, 0, 98, 112, 98, 136, 96, 0, 0,
        164, 96, 16, 72, 52, 95, 83, 66, 95, 16, 75, 10, 80, 67, 73, 48, 20, 68, 10, 95, 80, 82,
        84, 0, 112, 18, 2, 128, 96, 112, 0, 97, 162, 66, 9, 149, 97, 10, 128, 112, 122, 97, 10, 2,
        0, 98, 112, 123, 114, 97, 98, 0, 10, 3, 0, 99, 160, 16, 147, 99, 0, 112, 18, 9, 4, 0, 0,
        76, 78, 75, 68, 0, 100, 160, 36, 147, 99, 1, 160, 17, 147, 97, 10, 4, 112, 18, 9, 4, 0, 0,
        76, 78, 75, 83, 0, 100, 161, 13, 112, 18, 9, 4, 0, 0, 76, 78, 75, 65, 0, 100, 160, 17, 147,
        99, 10, 2, 112, 18, 9, 4, 0, 0, 76, 78, 75, 66, 0, 100, 160, 17, 147, 99, 10, 3, 112, 18,
        9, 4, 0, 0, 76, 78, 75, 67, 0, 100, 112, 125, 121, 98, 10, 16, 0, 11, 255, 255, 0, 136,
        100, 0, 0, 112, 123, 97, 10, 3, 0, 136, 100, 1, 0, 112, 100, 136, 96, 97, 0, 117, 97, 164,
        96, 20, 19, 73, 81, 83, 84, 1, 160, 9, 123, 10, 128, 104, 0, 164, 10, 9, 164, 10, 11, 20,
        54, 73, 81, 67, 82, 9, 8, 80, 82, 82, 48, 17, 14, 10, 11, 137, 6, 0, 9, 1, 0, 0, 0, 0, 121,
        0, 138, 80, 82, 82, 48, 10, 5, 80, 82, 82, 73, 160, 11, 149, 104, 10, 128, 112, 104, 80,
        82, 82, 73, 164, 80, 82, 82, 48, 91, 130, 76, 7, 76, 78, 75, 65, 8, 95, 72, 73, 68, 12, 65,
        208, 12, 15, 8, 95, 85, 73, 68, 0, 8, 95, 80, 82, 83, 17, 22, 10, 19, 137, 14, 0, 9, 3, 5,
        0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 121, 0, 20, 15, 95, 83, 84, 65, 0, 164, 73, 81, 83, 84,
        80, 82, 81, 48, 20, 17, 95, 68, 73, 83, 0, 125, 80, 82, 81, 48, 10, 128, 80, 82, 81, 48,
        20, 15, 95, 67, 82, 83, 0, 164, 73, 81, 67, 82, 80, 82, 81, 48, 20, 23, 95, 83, 82, 83, 1,
        138, 104, 10, 5, 80, 82, 82, 73, 112, 80, 82, 82, 73, 80, 82, 81, 48, 91, 130, 76, 7, 76,
        78, 75, 66, 8, 95, 72, 73, 68, 12, 65, 208, 12, 15, 8, 95, 85, 73, 68, 1, 8, 95, 80, 82,
        83, 17, 22, 10, 19, 137, 14, 0, 9, 3, 5, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 121, 0, 20, 15,
        95, 83, 84, 65, 0, 164, 73, 81, 83, 84, 80, 82, 81, 49, 20, 17, 95, 68, 73, 83, 0, 125, 80,
        82, 81, 49, 10, 128, 80, 82, 81, 49, 20, 15, 95, 67, 82, 83, 0, 164, 73, 81, 67, 82, 80,
        82, 81, 49, 20, 23, 95, 83, 82, 83, 1, 138, 104, 10, 5, 80, 82, 82, 73, 112, 80, 82, 82,
        73, 80, 82, 81, 49, 91, 130, 77, 7, 76, 78, 75, 67, 8, 95, 72, 73, 68, 12, 65, 208, 12, 15,
        8, 95, 85, 73, 68, 10, 2, 8, 95, 80, 82, 83, 17, 22, 10, 19, 137, 14, 0, 9, 3, 5, 0, 0, 0,
        10, 0, 0, 0, 11, 0, 0, 0, 121, 0, 20, 15, 95, 83, 84, 65, 0, 164, 73, 81, 83, 84, 80, 82,
        81, 50, 20, 17, 95, 68, 73, 83, 0, 125, 80, 82, 81, 50, 10, 128, 80, 82, 81, 50, 20, 15,
        95, 67, 82, 83, 0, 164, 73, 81, 67, 82, 80, 82, 81, 50, 20, 23, 95, 83, 82, 83, 1, 138,
        104, 10, 5, 80, 82, 82, 73, 112, 80, 82, 82, 73, 80, 82, 81, 50, 91, 130, 77, 7, 76, 78,
        75, 68, 8, 95, 72, 73, 68, 12, 65, 208, 12, 15, 8, 95, 85, 73, 68, 10, 3, 8, 95, 80, 82,
        83, 17, 22, 10, 19, 137, 14, 0, 9, 3, 5, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 121, 0, 20, 15,
        95, 83, 84, 65, 0, 164, 73, 81, 83, 84, 80, 82, 81, 51, 20, 17, 95, 68, 73, 83, 0, 125, 80,
        82, 81, 51, 10, 128, 80, 82, 81, 51, 20, 15, 95, 67, 82, 83, 0, 164, 73, 81, 67, 82, 80,
        82, 81, 51, 20, 23, 95, 83, 82, 83, 1, 138, 104, 10, 5, 80, 82, 82, 73, 112, 80, 82, 82,
        73, 80, 82, 81, 51, 91, 130, 79, 4, 76, 78, 75, 83, 8, 95, 72, 73, 68, 12, 65, 208, 12, 15,
        8, 95, 85, 73, 68, 10, 4, 8, 95, 80, 82, 83, 17, 14, 10, 11, 137, 6, 0, 9, 1, 9, 0, 0, 0,
        121, 0, 20, 9, 95, 83, 84, 65, 0, 164, 10, 11, 20, 6, 95, 68, 73, 83, 0, 20, 11, 95, 67,
        82, 83, 0, 164, 95, 80, 82, 83, 20, 6, 95, 83, 82, 83, 1, 16, 77, 8, 95, 83, 66, 95, 91,
        130, 69, 8, 72, 80, 69, 84, 8, 95, 72, 73, 68, 12, 65, 208, 1, 3, 8, 95, 85, 73, 68, 0, 91,
        128, 72, 80, 84, 77, 0, 12, 0, 0, 208, 254, 11, 0, 4, 91, 129, 16, 72, 80, 84, 77, 19, 86,
        69, 78, 68, 32, 80, 82, 68, 95, 32, 20, 54, 95, 83, 84, 65, 0, 112, 86, 69, 78, 68, 96,
        112, 80, 82, 68, 95, 97, 122, 96, 10, 16, 96, 160, 12, 145, 147, 96, 0, 147, 96, 11, 255,
        255, 164, 0, 160, 14, 145, 147, 97, 0, 148, 97, 12, 0, 225, 245, 5, 164, 0, 164, 10, 15, 8,
        95, 67, 82, 83, 17, 17, 10, 14, 134, 9, 0, 0, 0, 0, 208, 254, 0, 4, 0, 0, 121, 0, 16, 20,
        95, 71, 80, 69, 8, 95, 72, 73, 68, 13, 65, 67, 80, 73, 48, 48, 48, 54, 0, 16, 79, 62, 95,
        83, 66, 95, 91, 130, 72, 10, 92, 47, 3, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 8,
        95, 72, 73, 68, 12, 65, 208, 10, 6, 8, 95, 85, 73, 68, 13, 67, 80, 85, 32, 72, 111, 116,
        112, 108, 117, 103, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 0, 91, 1, 67, 80, 76,
        75, 0, 8, 95, 67, 82, 83, 17, 13, 10, 10, 71, 1, 0, 175, 0, 175, 1, 12, 121, 0, 91, 128,
        80, 82, 83, 84, 1, 11, 0, 175, 10, 12, 91, 129, 40, 80, 82, 83, 84, 65, 0, 32, 67, 80, 69,
        78, 1, 67, 73, 78, 83, 1, 67, 82, 77, 86, 1, 67, 69, 74, 48, 1, 67, 69, 74, 70, 1, 0, 3,
        67, 67, 77, 68, 8, 91, 129, 18, 80, 82, 83, 84, 3, 67, 83, 69, 76, 32, 0, 32, 67, 68, 65,
        84, 32, 20, 12, 95, 73, 78, 73, 8, 112, 0, 67, 83, 69, 76, 91, 130, 77, 51, 92, 46, 95, 83,
        66, 95, 67, 80, 85, 83, 8, 95, 72, 73, 68, 13, 65, 67, 80, 73, 48, 48, 49, 48, 0, 8, 95,
        67, 73, 68, 12, 65, 208, 10, 5, 20, 17, 67, 84, 70, 89, 2, 160, 10, 147, 104, 0, 134, 67,
        48, 48, 48, 105, 20, 72, 6, 67, 83, 84, 65, 9, 91, 35, 92, 47, 4, 95, 83, 66, 95, 80, 67,
        73, 48, 80, 82, 69, 83, 67, 80, 76, 75, 255, 255, 112, 104, 92, 47, 4, 95, 83, 66, 95, 80,
        67, 73, 48, 80, 82, 69, 83, 67, 83, 69, 76, 112, 0, 96, 160, 26, 147, 92, 47, 4, 95, 83,
        66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 80, 69, 78, 1, 112, 10, 15, 96, 91, 39, 92, 47,
        4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 80, 76, 75, 164, 96, 20, 77, 5, 67,
        69, 74, 48, 9, 91, 35, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 80,
        76, 75, 255, 255, 112, 104, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67,
        83, 69, 76, 112, 1, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 69, 74,
        48, 91, 39, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 80, 76, 75, 20,
        70, 22, 67, 83, 67, 78, 8, 91, 35, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69,
        83, 67, 80, 76, 75, 255, 255, 8, 67, 78, 69, 87, 18, 2, 255, 112, 0, 99, 112, 1, 100, 162,
        68, 18, 147, 100, 1, 112, 0, 100, 112, 1, 96, 112, 0, 97, 162, 76, 12, 144, 147, 96, 1,
        149, 99, 1, 112, 0, 96, 112, 99, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83,
        67, 83, 69, 76, 112, 0, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 67,
        77, 68, 160, 23, 149, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 68,
        65, 84, 99, 165, 160, 9, 147, 97, 10, 255, 112, 1, 100, 165, 112, 92, 47, 4, 95, 83, 66,
        95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 68, 65, 84, 99, 160, 36, 147, 92, 47, 4, 95, 83,
        66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 73, 78, 83, 1, 112, 99, 136, 67, 78, 69, 87,
        97, 0, 117, 97, 112, 1, 96, 161, 55, 160, 53, 147, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73,
        48, 80, 82, 69, 83, 67, 82, 77, 86, 1, 67, 84, 70, 89, 99, 10, 3, 112, 1, 92, 47, 4, 95,
        83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 82, 77, 86, 112, 1, 96, 117, 99, 112, 0,
        98, 162, 69, 4, 149, 98, 97, 112, 131, 136, 67, 78, 69, 87, 98, 0, 99, 67, 84, 70, 89, 99,
        1, 112, 99, 91, 49, 112, 99, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67,
        83, 69, 76, 112, 1, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 73, 78,
        83, 117, 98, 91, 39, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 80, 76,
        75, 20, 77, 9, 67, 79, 83, 84, 12, 91, 35, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80,
        82, 69, 83, 67, 80, 76, 75, 255, 255, 112, 104, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48,
        80, 82, 69, 83, 67, 83, 69, 76, 112, 1, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82,
        69, 83, 67, 67, 77, 68, 112, 105, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69,
        83, 67, 68, 65, 84, 112, 10, 2, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83,
        67, 67, 77, 68, 112, 106, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67,
        68, 65, 84, 91, 39, 92, 47, 4, 95, 83, 66, 95, 80, 67, 73, 48, 80, 82, 69, 83, 67, 80, 76,
        75, 91, 131, 56, 67, 48, 48, 48, 0, 0, 0, 0, 0, 0, 20, 12, 95, 83, 84, 65, 8, 164, 67, 83,
        84, 65, 0, 8, 95, 77, 65, 84, 17, 11, 10, 8, 0, 8, 0, 0, 1, 0, 0, 0, 20, 14, 95, 79, 83,
        84, 11, 67, 79, 83, 84, 0, 104, 105, 106, 20, 27, 92, 46, 95, 71, 80, 69, 95, 69, 48, 50,
        0, 92, 47, 3, 95, 83, 66, 95, 67, 80, 85, 83, 67, 83, 67, 78, 16, 67, 20, 92, 46, 95, 83,
        66, 95, 80, 67, 73, 48, 8, 95, 67, 82, 83, 17, 64, 10, 10, 156, 136, 13, 0, 2, 12, 0, 0, 0,
        0, 0, 255, 0, 0, 0, 0, 1, 71, 1, 248, 12, 248, 12, 1, 8, 136, 13, 0, 1, 12, 3, 0, 0, 0, 0,
        247, 12, 0, 0, 248, 12, 136, 13, 0, 1, 12, 3, 0, 0, 0, 13, 255, 255, 0, 0, 0, 243, 135, 23,
        0, 0, 12, 3, 0, 0, 0, 0, 0, 0, 10, 0, 255, 255, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 135, 23, 0,
        0, 12, 1, 0, 0, 0, 0, 0, 0, 0, 64, 255, 255, 191, 254, 0, 0, 0, 0, 0, 0, 192, 190, 138, 43,
        0, 0, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 255, 255, 255, 127, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 121, 0, 91, 130, 67, 4, 71, 80, 69,
        48, 8, 95, 72, 73, 68, 13, 80, 78, 80, 48, 65, 48, 54, 0, 8, 95, 85, 73, 68, 13, 71, 80,
        69, 48, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 0, 8, 95, 83, 84, 65, 10, 11, 8,
        95, 67, 82, 83, 17, 13, 10, 10, 71, 1, 224, 175, 224, 175, 1, 4, 121, 0, 91, 130, 74, 4,
        80, 72, 80, 82, 8, 95, 72, 73, 68, 13, 80, 78, 80, 48, 65, 48, 54, 0, 8, 95, 85, 73, 68,
        13, 80, 67, 73, 32, 72, 111, 116, 112, 108, 117, 103, 32, 114, 101, 115, 111, 117, 114, 99,
        101, 115, 0, 8, 95, 83, 84, 65, 10, 11, 8, 95, 67, 82, 83, 17, 13, 10, 10, 71, 1, 0, 174,
        0, 174, 1, 24, 121, 0, 16, 41, 92, 0, 8, 95, 83, 51, 95, 18, 6, 4, 1, 1, 0, 0, 8, 95, 83,
        52, 95, 18, 8, 4, 10, 2, 10, 2, 0, 0, 8, 95, 83, 53, 95, 18, 6, 4, 0, 0, 0, 0, 16, 59, 92,
        46, 95, 83, 66, 95, 80, 67, 73, 48, 91, 130, 46, 70, 87, 67, 70, 8, 95, 72, 73, 68, 13, 81,
        69, 77, 85, 48, 48, 48, 50, 0, 8, 95, 83, 84, 65, 10, 11, 8, 95, 67, 82, 83, 17, 13, 10,
        10, 71, 1, 16, 5, 16, 5, 1, 12, 121, 0, 16, 79, 230, 92, 95, 83, 66, 95, 16, 71, 230, 80,
        67, 73, 48, 91, 130, 11, 83, 48, 48, 95, 8, 95, 65, 68, 82, 0, 91, 130, 70, 27, 83, 48, 56,
        95, 8, 95, 65, 68, 82, 12, 0, 0, 1, 0, 91, 128, 80, 52, 48, 67, 2, 10, 96, 10, 4, 16, 44,
        92, 95, 83, 66, 95, 91, 129, 36, 47, 3, 80, 67, 73, 48, 83, 48, 56, 95, 80, 52, 48, 67, 1,
        80, 82, 81, 48, 8, 80, 82, 81, 49, 8, 80, 82, 81, 50, 8, 80, 82, 81, 51, 8, 91, 130, 52,
        75, 66, 68, 95, 8, 95, 72, 73, 68, 12, 65, 208, 3, 3, 8, 95, 83, 84, 65, 10, 15, 8, 95, 67,
        82, 83, 17, 24, 10, 21, 71, 1, 96, 0, 96, 0, 1, 1, 71, 1, 100, 0, 100, 0, 1, 1, 34, 2, 0,
        121, 0, 91, 130, 36, 77, 79, 85, 95, 8, 95, 72, 73, 68, 12, 65, 208, 15, 19, 8, 95, 83, 84,
        65, 10, 15, 8, 95, 67, 82, 83, 17, 8, 10, 5, 34, 0, 16, 121, 0, 91, 130, 65, 8, 70, 68, 67,
        48, 8, 95, 72, 73, 68, 12, 65, 208, 7, 0, 8, 95, 67, 82, 83, 17, 27, 10, 24, 71, 1, 242, 3,
        242, 3, 0, 4, 71, 1, 247, 3, 247, 3, 0, 1, 34, 64, 0, 42, 4, 0, 121, 0, 91, 130, 49, 70,
        76, 80, 65, 8, 95, 65, 68, 82, 0, 8, 95, 70, 68, 73, 18, 32, 16, 0, 10, 5, 10, 79, 10, 48,
        1, 10, 175, 10, 2, 10, 37, 10, 2, 10, 18, 10, 27, 10, 255, 10, 108, 10, 246, 10, 15, 10, 8,
        8, 95, 70, 68, 69, 17, 23, 10, 20, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
        0, 91, 130, 50, 76, 80, 84, 49, 8, 95, 72, 73, 68, 12, 65, 208, 4, 0, 8, 95, 85, 73, 68, 1,
        8, 95, 83, 84, 65, 10, 15, 8, 95, 67, 82, 83, 17, 16, 10, 13, 71, 1, 120, 3, 120, 3, 8, 8,
        34, 128, 0, 121, 0, 91, 130, 50, 67, 79, 77, 49, 8, 95, 72, 73, 68, 12, 65, 208, 5, 1, 8,
        95, 85, 73, 68, 1, 8, 95, 83, 84, 65, 10, 15, 8, 95, 67, 82, 83, 17, 16, 10, 13, 71, 1,
        248, 3, 248, 3, 0, 8, 34, 16, 0, 121, 0, 91, 130, 37, 82, 84, 67, 95, 8, 95, 72, 73, 68,
        12, 65, 208, 11, 0, 8, 95, 67, 82, 83, 17, 16, 10, 13, 71, 1, 112, 0, 112, 0, 1, 8, 34, 0,
        1, 121, 0, 91, 130, 15, 83, 48, 57, 95, 8, 95, 65, 68, 82, 12, 1, 0, 1, 0, 91, 130, 15, 83,
        48, 66, 95, 8, 95, 65, 68, 82, 12, 3, 0, 1, 0, 91, 130, 42, 83, 49, 48, 95, 8, 95, 65, 68,
        82, 12, 0, 0, 2, 0, 20, 8, 95, 83, 49, 68, 0, 164, 0, 20, 8, 95, 83, 50, 68, 0, 164, 0, 20,
        8, 95, 83, 51, 68, 0, 164, 0, 91, 130, 15, 83, 49, 56, 95, 8, 95, 65, 68, 82, 12, 0, 0, 3,
        0, 8, 66, 83, 69, 76, 0, 16, 65, 5, 83, 49, 56, 95, 8, 65, 83, 85, 78, 10, 3, 20, 41, 95,
        68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83,
        85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10,
        3, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75,
        5, 83, 50, 48, 95, 8, 95, 65, 68, 82, 12, 0, 0, 4, 0, 8, 65, 83, 85, 78, 10, 4, 20, 41, 95,
        68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83,
        85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10,
        4, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75,
        5, 83, 50, 56, 95, 8, 95, 65, 68, 82, 12, 0, 0, 5, 0, 8, 65, 83, 85, 78, 10, 5, 20, 41, 95,
        68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83,
        85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10,
        5, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75,
        5, 83, 51, 48, 95, 8, 95, 65, 68, 82, 12, 0, 0, 6, 0, 8, 65, 83, 85, 78, 10, 6, 20, 41, 95,
        68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83,
        85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10,
        6, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75,
        5, 83, 51, 56, 95, 8, 95, 65, 68, 82, 12, 0, 0, 7, 0, 8, 65, 83, 85, 78, 10, 7, 20, 41, 95,
        68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83,
        85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10,
        7, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75,
        5, 83, 52, 48, 95, 8, 95, 65, 68, 82, 12, 0, 0, 8, 0, 8, 65, 83, 85, 78, 10, 8, 20, 41, 95,
        68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83,
        85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10,
        8, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75,
        5, 83, 52, 56, 95, 8, 95, 65, 68, 82, 12, 0, 0, 9, 0, 8, 65, 83, 85, 78, 10, 9, 20, 41, 95,
        68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83,
        85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10,
        9, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75,
        5, 83, 53, 48, 95, 8, 95, 65, 68, 82, 12, 0, 0, 10, 0, 8, 65, 83, 85, 78, 10, 10, 20, 41,
        95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65,
        83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78,
        10, 10, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130,
        75, 5, 83, 53, 56, 95, 8, 95, 65, 68, 82, 12, 0, 0, 11, 0, 8, 65, 83, 85, 78, 10, 11, 20,
        41, 95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112,
        65, 83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85,
        78, 10, 11, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91,
        130, 75, 5, 83, 54, 48, 95, 8, 95, 65, 68, 82, 12, 0, 0, 12, 0, 8, 65, 83, 85, 78, 10, 12,
        20, 41, 95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0,
        112, 65, 83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83,
        85, 78, 10, 12, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78,
        91, 130, 75, 5, 83, 54, 56, 95, 8, 95, 65, 68, 82, 12, 0, 0, 13, 0, 8, 65, 83, 85, 78, 10,
        13, 20, 41, 95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0,
        0, 112, 65, 83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95,
        83, 85, 78, 10, 13, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85,
        78, 91, 130, 75, 5, 83, 55, 48, 95, 8, 95, 65, 68, 82, 12, 0, 0, 14, 0, 8, 65, 83, 85, 78,
        10, 14, 20, 41, 95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96,
        0, 0, 112, 65, 83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8,
        95, 83, 85, 78, 10, 14, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83,
        85, 78, 91, 130, 75, 5, 83, 55, 56, 95, 8, 95, 65, 68, 82, 12, 0, 0, 15, 0, 8, 65, 83, 85,
        78, 10, 15, 20, 41, 95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136,
        96, 0, 0, 112, 65, 83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96,
        8, 95, 83, 85, 78, 10, 15, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95,
        83, 85, 78, 91, 130, 75, 5, 83, 56, 48, 95, 8, 95, 65, 68, 82, 12, 0, 0, 16, 0, 8, 65, 83,
        85, 78, 10, 16, 20, 41, 95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76,
        136, 96, 0, 0, 112, 65, 83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107,
        96, 8, 95, 83, 85, 78, 10, 16, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76,
        95, 83, 85, 78, 91, 130, 75, 5, 83, 56, 56, 95, 8, 95, 65, 68, 82, 12, 0, 0, 17, 0, 8, 65,
        83, 85, 78, 10, 17, 20, 41, 95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69,
        76, 136, 96, 0, 0, 112, 65, 83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106,
        107, 96, 8, 95, 83, 85, 78, 10, 17, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69,
        76, 95, 83, 85, 78, 91, 130, 75, 5, 83, 57, 48, 95, 8, 95, 65, 68, 82, 12, 0, 0, 18, 0, 8,
        65, 83, 85, 78, 10, 18, 20, 41, 95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83,
        69, 76, 136, 96, 0, 0, 112, 65, 83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105,
        106, 107, 96, 8, 95, 83, 85, 78, 10, 18, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83,
        69, 76, 95, 83, 85, 78, 91, 130, 75, 5, 83, 57, 56, 95, 8, 95, 65, 68, 82, 12, 0, 0, 19, 0,
        8, 65, 83, 85, 78, 10, 19, 20, 41, 95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66,
        83, 69, 76, 136, 96, 0, 0, 112, 65, 83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104,
        105, 106, 107, 96, 8, 95, 83, 85, 78, 10, 19, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74,
        66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75, 5, 83, 65, 48, 95, 8, 95, 65, 68, 82, 12, 0,
        0, 20, 0, 8, 65, 83, 85, 78, 10, 20, 20, 41, 95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96,
        112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83,
        77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10, 20, 20, 18, 95, 69, 74, 48, 1, 80, 67,
        69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75, 5, 83, 65, 56, 95, 8, 95, 65, 68, 82,
        12, 0, 0, 21, 0, 8, 65, 83, 85, 78, 10, 21, 20, 41, 95, 68, 83, 77, 12, 112, 18, 4, 2, 0,
        0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83, 85, 78, 136, 96, 1, 0, 164, 80, 68,
        83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10, 21, 20, 18, 95, 69, 74, 48, 1, 80,
        67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75, 5, 83, 66, 48, 95, 8, 95, 65, 68,
        82, 12, 0, 0, 22, 0, 8, 65, 83, 85, 78, 10, 22, 20, 41, 95, 68, 83, 77, 12, 112, 18, 4, 2,
        0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83, 85, 78, 136, 96, 1, 0, 164, 80,
        68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10, 22, 20, 18, 95, 69, 74, 48, 1,
        80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75, 5, 83, 66, 56, 95, 8, 95, 65,
        68, 82, 12, 0, 0, 23, 0, 8, 65, 83, 85, 78, 10, 23, 20, 41, 95, 68, 83, 77, 12, 112, 18, 4,
        2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83, 85, 78, 136, 96, 1, 0, 164,
        80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10, 23, 20, 18, 95, 69, 74, 48,
        1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75, 5, 83, 67, 48, 95, 8, 95,
        65, 68, 82, 12, 0, 0, 24, 0, 8, 65, 83, 85, 78, 10, 24, 20, 41, 95, 68, 83, 77, 12, 112,
        18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83, 85, 78, 136, 96, 1, 0,
        164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10, 24, 20, 18, 95, 69, 74,
        48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75, 5, 83, 67, 56, 95, 8,
        95, 65, 68, 82, 12, 0, 0, 25, 0, 8, 65, 83, 85, 78, 10, 25, 20, 41, 95, 68, 83, 77, 12,
        112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83, 85, 78, 136, 96,
        1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10, 25, 20, 18, 95,
        69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75, 5, 83, 68, 48,
        95, 8, 95, 65, 68, 82, 12, 0, 0, 26, 0, 8, 65, 83, 85, 78, 10, 26, 20, 41, 95, 68, 83, 77,
        12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83, 85, 78, 136,
        96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10, 26, 20, 18,
        95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75, 5, 83, 68,
        56, 95, 8, 95, 65, 68, 82, 12, 0, 0, 27, 0, 8, 65, 83, 85, 78, 10, 27, 20, 41, 95, 68, 83,
        77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83, 85, 78,
        136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10, 27, 20,
        18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75, 5, 83,
        69, 48, 95, 8, 95, 65, 68, 82, 12, 0, 0, 28, 0, 8, 65, 83, 85, 78, 10, 28, 20, 41, 95, 68,
        83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83, 85,
        78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10, 28,
        20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75, 5,
        83, 69, 56, 95, 8, 95, 65, 68, 82, 12, 0, 0, 29, 0, 8, 65, 83, 85, 78, 10, 29, 20, 41, 95,
        68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65, 83,
        85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78, 10,
        29, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130, 75,
        5, 83, 70, 48, 95, 8, 95, 65, 68, 82, 12, 0, 0, 30, 0, 8, 65, 83, 85, 78, 10, 30, 20, 41,
        95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112, 65,
        83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85, 78,
        10, 30, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 91, 130,
        75, 5, 83, 70, 56, 95, 8, 95, 65, 68, 82, 12, 0, 0, 31, 0, 8, 65, 83, 85, 78, 10, 31, 20,
        41, 95, 68, 83, 77, 12, 112, 18, 4, 2, 0, 0, 96, 112, 66, 83, 69, 76, 136, 96, 0, 0, 112,
        65, 83, 85, 78, 136, 96, 1, 0, 164, 80, 68, 83, 77, 104, 105, 106, 107, 96, 8, 95, 83, 85,
        78, 10, 31, 20, 18, 95, 69, 74, 48, 1, 80, 67, 69, 74, 66, 83, 69, 76, 95, 83, 85, 78, 20,
        72, 27, 68, 86, 78, 84, 2, 160, 12, 123, 104, 10, 8, 0, 134, 83, 49, 56, 95, 105, 160, 12,
        123, 104, 10, 16, 0, 134, 83, 50, 48, 95, 105, 160, 12, 123, 104, 10, 32, 0, 134, 83, 50,
        56, 95, 105, 160, 12, 123, 104, 10, 64, 0, 134, 83, 51, 48, 95, 105, 160, 12, 123, 104, 10,
        128, 0, 134, 83, 51, 56, 95, 105, 160, 13, 123, 104, 11, 0, 1, 0, 134, 83, 52, 48, 95, 105,
        160, 13, 123, 104, 11, 0, 2, 0, 134, 83, 52, 56, 95, 105, 160, 13, 123, 104, 11, 0, 4, 0,
        134, 83, 53, 48, 95, 105, 160, 13, 123, 104, 11, 0, 8, 0, 134, 83, 53, 56, 95, 105, 160,
        13, 123, 104, 11, 0, 16, 0, 134, 83, 54, 48, 95, 105, 160, 13, 123, 104, 11, 0, 32, 0, 134,
        83, 54, 56, 95, 105, 160, 13, 123, 104, 11, 0, 64, 0, 134, 83, 55, 48, 95, 105, 160, 13,
        123, 104, 11, 0, 128, 0, 134, 83, 55, 56, 95, 105, 160, 15, 123, 104, 12, 0, 0, 1, 0, 0,
        134, 83, 56, 48, 95, 105, 160, 15, 123, 104, 12, 0, 0, 2, 0, 0, 134, 83, 56, 56, 95, 105,
        160, 15, 123, 104, 12, 0, 0, 4, 0, 0, 134, 83, 57, 48, 95, 105, 160, 15, 123, 104, 12, 0,
        0, 8, 0, 0, 134, 83, 57, 56, 95, 105, 160, 15, 123, 104, 12, 0, 0, 16, 0, 0, 134, 83, 65,
        48, 95, 105, 160, 15, 123, 104, 12, 0, 0, 32, 0, 0, 134, 83, 65, 56, 95, 105, 160, 15, 123,
        104, 12, 0, 0, 64, 0, 0, 134, 83, 66, 48, 95, 105, 160, 15, 123, 104, 12, 0, 0, 128, 0, 0,
        134, 83, 66, 56, 95, 105, 160, 15, 123, 104, 12, 0, 0, 0, 1, 0, 134, 83, 67, 48, 95, 105,
        160, 15, 123, 104, 12, 0, 0, 0, 2, 0, 134, 83, 67, 56, 95, 105, 160, 15, 123, 104, 12, 0,
        0, 0, 4, 0, 134, 83, 68, 48, 95, 105, 160, 15, 123, 104, 12, 0, 0, 0, 8, 0, 134, 83, 68,
        56, 95, 105, 160, 15, 123, 104, 12, 0, 0, 0, 16, 0, 134, 83, 69, 48, 95, 105, 160, 15, 123,
        104, 12, 0, 0, 0, 32, 0, 134, 83, 69, 56, 95, 105, 160, 15, 123, 104, 12, 0, 0, 0, 64, 0,
        134, 83, 70, 48, 95, 105, 160, 15, 123, 104, 12, 0, 0, 0, 128, 0, 134, 83, 70, 56, 95, 105,
        16, 43, 92, 46, 95, 83, 66, 95, 80, 67, 73, 48, 20, 31, 80, 67, 78, 84, 0, 112, 0, 66, 78,
        85, 77, 68, 86, 78, 84, 80, 67, 73, 85, 1, 68, 86, 78, 84, 80, 67, 73, 68, 10, 3, 16, 63,
        95, 71, 80, 69, 20, 57, 95, 69, 48, 49, 0, 91, 35, 92, 47, 3, 95, 83, 66, 95, 80, 67, 73,
        48, 66, 76, 67, 75, 255, 255, 92, 47, 3, 95, 83, 66, 95, 80, 67, 73, 48, 80, 67, 78, 84,
        91, 39, 92, 47, 3, 95, 83, 66, 95, 80, 67, 73, 48, 66, 76, 67, 75,
    ];
    let aml_len = aml_slice.len();
    sprintln!(
        "{} {:?} {} {:?}",
        core::str::from_utf8(&hdr.signature).unwrap(),
        hdr,
        aml_len,
        aml_slice
    );
    parse_definition_block(&aml_slice);
}

fn parse_definition_block(mut input: &[u8]) {
    // let mut offset = 0;
    loop {
        let (new_input, ty) = parse_block_type(input);
        input = new_input;
        // sprintln!("Block type {:x} at offset {:x}", ty, offset);
        match ty {
            0x10 => {
                let (new_input, _) = parse_def_scope(input);
                input = new_input;
            }
            _ => {
                panic!("unknown block type {:x}", ty);
            }
        }
    }
}

fn parse_block_type(input: &[u8]) -> ParseResult<u8> {
    (&input[1..], input[0])
}

fn parse_def_scope(input: &[u8]) -> ParseResult<()> {
    let (input, pkg_length) = parse_pkg_length(input);
    parse_name_string(input);
    (&input[pkg_length..], ())
}

fn parse_pkg_length(input: &[u8]) -> ParseResult<usize> {
    let extra_bytes_count = (input[0] >> 6) as usize;
    let pkg_length = if extra_bytes_count == 0 {
        input[0] as usize
    } else {
        assert_eq!(input[0] & 0b0011_0000, 0);
        let mut pkg_length = (input[0] & 0xf) as usize;
        for i in 1..=extra_bytes_count {
            pkg_length |= (input[i] as usize) << (i * 8 - 4);
        }

        pkg_length
    };
    (
        &input[extra_bytes_count + 1..],
        pkg_length - (extra_bytes_count + 1),
    )
}

fn parse_name_string(input: &[u8]) -> ParseResult<()> {
    if let Some((input, _)) = parse_root_char(input) {
        return parse_name_path(input);
    } else {
        let (input, _) = parse_prefix_path(input);
        return parse_name_path(input);
    }
}

fn parse_root_char(input: &[u8]) -> Option<ParseResult<()>> {
    if input[0] == b'\\' {
        return Some((&input[1..], ()));
    }

    None
}

fn parse_prefix_path(mut input: &[u8]) -> ParseResult<usize> {
    let mut i = 0;
    loop {
        if input[i] == b'^' {
            i += 1;
            input = &input[1..];
            continue;
        }

        break;
    }

    (input, i)
}

fn parse_name_path(input: &[u8]) -> ParseResult<()> {
    if let Some((input, name_seg)) = parse_name_seg(input) {
        sprintln!("{}", core::str::from_utf8(&name_seg).unwrap());
        return (input, ());
    }

    if let Some((input, name_seg)) = parse_dual_name_path(input) {
        sprintln!("{}", core::str::from_utf8(&name_seg).unwrap());
        return (input, ());
    }

    if let Some((input, _)) = parse_null_name(input) {
        return (input, ());
    }

    unimplemented!();
}

fn parse_dual_name_path(mut input: &[u8]) -> Option<ParseResult<[u8; 8]>> {
    let mut total_bytes_read = 1;
    if input[0] != b'.' {
        return None;
    }

    input = &input[1..];

    let mut name_path = [0u8; 8];
    if let Some((input, name_seg)) = parse_name_seg(input) {
        name_path[0] = name_seg[0];
        name_path[1] = name_seg[1];
        name_path[2] = name_seg[2];
        name_path[3] = name_seg[3];
    }

    if let Some((input, name_seg)) = parse_name_seg(input) {
        name_path[4] = name_seg[0];
        name_path[5] = name_seg[1];
        name_path[6] = name_seg[2];
        name_path[7] = name_seg[3];
    }

    Some((input, name_path))
}

fn parse_null_name(input: &[u8]) -> Option<ParseResult<()>> {
    if input[0] == 0 {
        return Some((&input[1..], ()));
    }

    None
}

fn parse_name_seg(input: &[u8]) -> Option<ParseResult<[u8; 4]>> {
    let mut name_seg = [0; 4];

    let (input, char) = parse_lead_name_char(input)?;
    name_seg[0] = char;
    let (input, char) = parse_name_char(input)?;
    name_seg[1] = char;
    let (input, char) = parse_name_char(input)?;
    name_seg[2] = char;
    let (input, char) = parse_name_char(input)?;
    name_seg[3] = char;

    Some((input, name_seg))
}

fn parse_lead_name_char(input: &[u8]) -> Option<ParseResult<u8>> {
    let b = input[0];
    if b == b'_' || (b >= b'A' && b <= b'Z') {
        return Some((&input[1..], b));
    }

    None
}

fn parse_digit_char(input: &[u8]) -> Option<ParseResult<u8>> {
    let b = input[0];
    if b >= b'0' && b <= b'9' {
        return Some((&input[1..], b));
    }

    None
}

fn parse_name_char(input: &[u8]) -> Option<ParseResult<u8>> {
    if let Some(r) = parse_digit_char(input) {
        return Some(r);
    };

    parse_lead_name_char(input)
}

type ParseResult<'a, T> = (&'a [u8], T);
